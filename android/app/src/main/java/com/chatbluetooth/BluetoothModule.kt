package com.chatbluetooth

import android.bluetooth.BluetoothAdapter
import android.bluetooth.BluetoothDevice
import android.bluetooth.BluetoothServerSocket
import android.bluetooth.BluetoothSocket
import android.content.BroadcastReceiver
import android.content.Context
import android.content.Intent
import android.content.IntentFilter
import android.util.Log
import android.util.Base64
import com.facebook.react.bridge.*
import com.facebook.react.modules.core.DeviceEventManagerModule
import java.io.IOException
import java.io.InputStream
import java.io.OutputStream
import java.util.UUID

class BluetoothModule(reactContext: ReactApplicationContext) :
  ReactContextBaseJavaModule(reactContext) {

  private val TAG = "BluetoothModule"
  private val APP_NAME = "SocialApp"
  private val MY_UUID = UUID.fromString("00001101-0000-1000-8000-00805F9B34FB") // UUID chu·∫©n SPP
  
  private var adapter: BluetoothAdapter? = BluetoothAdapter.getDefaultAdapter()
  private var serverSocket: BluetoothServerSocket? = null
  
  // L∆∞u tr·ªØ nhi·ªÅu k·∫øt n·ªëi
  private val connectedDevices = mutableMapOf<String, ConnectedThread>()
  
  private var acceptThread: AcceptThread? = null
  private var connectThread: ConnectThread? = null

  override fun getName(): String {
    return "BluetoothModule"
  }

  // ==================== QU·∫¢N L√ù BLUETOOTH ====================
  
  /** Ki·ªÉm tra Bluetooth c√≥ kh·∫£ d·ª•ng kh√¥ng */
  @ReactMethod
  fun isBluetoothAvailable(promise: Promise) {
    try {
      promise.resolve(adapter != null)
    } catch (e: Exception) {
      promise.reject("ERROR", e.message)
    }
  }

  /** Ki·ªÉm tra Bluetooth ƒë√£ b·∫≠t ch∆∞a */
  @ReactMethod
  fun isBluetoothEnabled(promise: Promise) {
    try {
      if (adapter == null) {
        promise.reject("NO_ADAPTER", "Thi·∫øt b·ªã kh√¥ng h·ªó tr·ª£ Bluetooth")
        return
      }
      promise.resolve(adapter!!.isEnabled)
    } catch (e: Exception) {
      promise.reject("ERROR", e.message)
    }
  }

  /** B·∫≠t Bluetooth (y√™u c·∫ßu user cho ph√©p) */
  @ReactMethod
  fun enableBluetooth(promise: Promise) {
    try {
      if (adapter == null) {
        promise.reject("NO_ADAPTER", "Thi·∫øt b·ªã kh√¥ng h·ªó tr·ª£ Bluetooth")
        return
      }
      
      if (adapter!!.isEnabled) {
        promise.resolve("Bluetooth ƒë√£ ƒë∆∞·ª£c b·∫≠t")
        return
      }

      // G·ª≠i intent ƒë·ªÉ user b·∫≠t bluetooth
      val enableIntent = Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE)
      enableIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
      reactApplicationContext.startActivity(enableIntent)
      promise.resolve("ƒê√£ g·ª≠i y√™u c·∫ßu b·∫≠t Bluetooth")
    } catch (e: Exception) {
      promise.reject("ERROR", e.message)
    }
  }

  /** ƒê·ªïi t√™n Bluetooth */
  @ReactMethod
  fun setBluetoothName(newName: String, promise: Promise) {
    try {
      if (adapter == null) {
        promise.reject("NO_ADAPTER", "Thi·∫øt b·ªã kh√¥ng h·ªó tr·ª£ Bluetooth")
        return
      }

      if (!adapter!!.isEnabled) {
        promise.reject("NOT_ENABLED", "Bluetooth ch∆∞a ƒë∆∞·ª£c b·∫≠t")
        return
      }

      val success = adapter!!.setName(newName)
      if (success) {
        promise.resolve("ƒê√£ ƒë·ªïi t√™n th√†nh: $newName")
      } else {
        promise.reject("FAILED", "ƒê·ªïi t√™n Bluetooth th·∫•t b·∫°i")
      }
    } catch (e: Exception) {
      Log.e(TAG, "Error:", e)
      promise.reject("ERROR", e.message)
    }
  }

  /** L·∫•y t√™n Bluetooth hi·ªán t·∫°i */
  @ReactMethod
  fun getBluetoothName(promise: Promise) {
    try {
      if (adapter == null) {
        promise.reject("NO_ADAPTER", "Thi·∫øt b·ªã kh√¥ng h·ªó tr·ª£ Bluetooth")
        return
      }

      if (!adapter!!.isEnabled) {
        promise.reject("NOT_ENABLED", "Bluetooth ch∆∞a ƒë∆∞·ª£c b·∫≠t")
        return
      }

      val name = adapter!!.name
      if (name != null) {
        promise.resolve(name)
      } else {
        promise.reject("NO_NAME", "Kh√¥ng l·∫•y ƒë∆∞·ª£c t√™n Bluetooth")
      }
    } catch (e: Exception) {
      Log.e(TAG, "Error:", e)
      promise.reject("ERROR", e.message)
    }
  }

  /** L·∫•y ƒë·ªãa ch·ªâ MAC c·ªßa thi·∫øt b·ªã */
  @ReactMethod
  fun getBluetoothAddress(promise: Promise) {
    try {
      if (adapter == null) {
        promise.reject("NO_ADAPTER", "Thi·∫øt b·ªã kh√¥ng h·ªó tr·ª£ Bluetooth")
        return
      }
      promise.resolve(adapter!!.address ?: "Unknown")
    } catch (e: Exception) {
      promise.reject("ERROR", e.message)
    }
  }

  // ==================== QU√âT THI·∫æT B·ªä ====================

  /** B·∫Øt ƒë·∫ßu qu√©t thi·∫øt b·ªã */
  @ReactMethod
  fun startDiscovery(promise: Promise) {
    try {
      if (adapter == null) {
        promise.reject("NO_ADAPTER", "Thi·∫øt b·ªã kh√¥ng h·ªó tr·ª£ Bluetooth")
        return
      }

      if (!adapter!!.isEnabled) {
        promise.reject("NOT_ENABLED", "Bluetooth ch∆∞a ƒë∆∞·ª£c b·∫≠t")
        return
      }

      // ƒêƒÉng k√Ω receiver ƒë·ªÉ nh·∫≠n k·∫øt qu·∫£ qu√©t
      val filter = IntentFilter()
      filter.addAction(BluetoothDevice.ACTION_FOUND)
      filter.addAction(BluetoothAdapter.ACTION_DISCOVERY_FINISHED)
      reactApplicationContext.registerReceiver(discoveryReceiver, filter)

      // H·ªßy qu√©t c≈© n·∫øu ƒëang qu√©t
      if (adapter!!.isDiscovering) {
        adapter!!.cancelDiscovery()
      }

      val started = adapter!!.startDiscovery()
      if (started) {
        promise.resolve("ƒê√£ b·∫Øt ƒë·∫ßu qu√©t thi·∫øt b·ªã")
      } else {
        promise.reject("FAILED", "Kh√¥ng th·ªÉ b·∫Øt ƒë·∫ßu qu√©t")
      }
    } catch (e: Exception) {
      promise.reject("ERROR", e.message)
    }
  }

  /** D·ª´ng qu√©t thi·∫øt b·ªã */
  @ReactMethod
  fun stopDiscovery(promise: Promise) {
    try {
      if (adapter == null) {
        promise.reject("NO_ADAPTER", "Thi·∫øt b·ªã kh√¥ng h·ªó tr·ª£ Bluetooth")
        return
      }

      if (adapter!!.isDiscovering) {
        adapter!!.cancelDiscovery()
        try {
          reactApplicationContext.unregisterReceiver(discoveryReceiver)
        } catch (e: Exception) {
          Log.w(TAG, "Receiver ch∆∞a ƒë∆∞·ª£c ƒëƒÉng k√Ω")
        }
      }
      promise.resolve("ƒê√£ d·ª´ng qu√©t")
    } catch (e: Exception) {
      promise.reject("ERROR", e.message)
    }
  }

  /** L·∫•y danh s√°ch thi·∫øt b·ªã ƒë√£ gh√©p n·ªëi */
  @ReactMethod
  fun getPairedDevices(promise: Promise) {
    try {
      if (adapter == null) {
        promise.reject("NO_ADAPTER", "Thi·∫øt b·ªã kh√¥ng h·ªó tr·ª£ Bluetooth")
        return
      }

      if (!adapter!!.isEnabled) {
        promise.reject("NOT_ENABLED", "Bluetooth ch∆∞a ƒë∆∞·ª£c b·∫≠t")
        return
      }

      val pairedDevices = adapter!!.bondedDevices
      val devices = Arguments.createArray()

      for (device in pairedDevices) {
        val deviceMap = Arguments.createMap()
        deviceMap.putString("name", device.name ?: "Unknown")
        deviceMap.putString("address", device.address)
        deviceMap.putString("bondState", getBondStateString(device.bondState))
        devices.pushMap(deviceMap)
      }

      promise.resolve(devices)
    } catch (e: Exception) {
      promise.reject("ERROR", e.message)
    }
  }

  private fun getBondStateString(state: Int): String {
    return when (state) {
      BluetoothDevice.BOND_BONDED -> "BONDED"
      BluetoothDevice.BOND_BONDING -> "BONDING"
      BluetoothDevice.BOND_NONE -> "NONE"
      else -> "UNKNOWN"
    }
  }

  // BroadcastReceiver ƒë·ªÉ nh·∫≠n thi·∫øt b·ªã ƒë∆∞·ª£c t√¨m th·∫•y
  private val discoveryReceiver = object : BroadcastReceiver() {
    override fun onReceive(context: Context?, intent: Intent?) {
      when (intent?.action) {
        BluetoothDevice.ACTION_FOUND -> {
          val device: BluetoothDevice? = intent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE)
          device?.let {
            val deviceMap = Arguments.createMap()
            deviceMap.putString("name", it.name ?: "Unknown")
            deviceMap.putString("address", it.address)
            deviceMap.putString("bondState", getBondStateString(it.bondState))
            sendEvent("onDeviceFound", deviceMap)
          }
        }
        BluetoothAdapter.ACTION_DISCOVERY_FINISHED -> {
          sendEvent("onDiscoveryFinished", null)
        }
      }
    }
  }

  // ==================== K·∫æT N·ªêI ====================

  /** M·ªü server ƒë·ªÉ ch·ªù k·∫øt n·ªëi (ch·∫ø ƒë·ªô server) */
  @ReactMethod
  fun startServer(promise: Promise) {
    try {
      if (adapter == null) {
        promise.reject("NO_ADAPTER", "Thi·∫øt b·ªã kh√¥ng h·ªó tr·ª£ Bluetooth")
        return
      }

      if (!adapter!!.isEnabled) {
        promise.reject("NOT_ENABLED", "Bluetooth ch∆∞a ƒë∆∞·ª£c b·∫≠t")
        return
      }

      acceptThread?.cancel()
      acceptThread = AcceptThread()
      acceptThread?.start()
      
      Log.d(TAG, "‚úÖ Server started - Name: ${adapter!!.name}, Address: ${adapter!!.address}, UUID: $MY_UUID")
      promise.resolve("Server ƒë√£ kh·ªüi ƒë·ªông")
    } catch (e: Exception) {
      promise.reject("ERROR", e.message)
    }
  }

  /** K·∫øt n·ªëi ƒë·∫øn thi·∫øt b·ªã kh√°c (ch·∫ø ƒë·ªô client) */
  @ReactMethod
  fun connectToDevice(address: String, promise: Promise) {
    try {
      if (adapter == null) {
        promise.reject("NO_ADAPTER", "Thi·∫øt b·ªã kh√¥ng h·ªó tr·ª£ Bluetooth")
        return
      }

      if (!adapter!!.isEnabled) {
        promise.reject("NOT_ENABLED", "Bluetooth ch∆∞a ƒë∆∞·ª£c b·∫≠t")
        return
      }

      val device = adapter!!.getRemoteDevice(address)
      Log.d(TAG, "üîå Attempting to connect to: ${device.name} ($address)")
      Log.d(TAG, "   Bond state: ${getBondStateString(device.bondState)}")
      Log.d(TAG, "   UUID: $MY_UUID")
      
      connectThread?.cancel()
      connectThread = ConnectThread(device)
      connectThread?.start()
      
      promise.resolve("ƒêang k·∫øt n·ªëi...")
    } catch (e: Exception) {
      Log.e(TAG, "‚ùå Connect error: ${e.message}", e)
      promise.reject("ERROR", e.message)
    }
  }

  /** Ng·∫Øt k·∫øt n·ªëi v·ªõi m·ªôt thi·∫øt b·ªã c·ª• th·ªÉ */
  @ReactMethod
  fun disconnect(address: String, promise: Promise) {
    try {
      val thread = connectedDevices[address]
      if (thread != null) {
        thread.cancel()
        connectedDevices.remove(address)
        
        val params = Arguments.createMap()
        params.putString("deviceAddress", address)
        sendEvent("onDisconnected", params)
        
        promise.resolve("ƒê√£ ng·∫Øt k·∫øt n·ªëi v·ªõi $address")
      } else {
        promise.reject("NOT_FOUND", "Kh√¥ng t√¨m th·∫•y k·∫øt n·ªëi v·ªõi thi·∫øt b·ªã n√†y")
      }
    } catch (e: Exception) {
      promise.reject("ERROR", e.message)
    }
  }

  /** Ng·∫Øt t·∫•t c·∫£ k·∫øt n·ªëi */
  @ReactMethod
  fun disconnectAll(promise: Promise) {
    try {
      connectThread?.cancel()
      
      // Ng·∫Øt t·∫•t c·∫£ k·∫øt n·ªëi hi·ªán c√≥
      for ((address, thread) in connectedDevices) {
        thread.cancel()
        
        val params = Arguments.createMap()
        params.putString("deviceAddress", address)
        sendEvent("onDisconnected", params)
      }
      connectedDevices.clear()
      
      promise.resolve("ƒê√£ ng·∫Øt t·∫•t c·∫£ k·∫øt n·ªëi")
    } catch (e: Exception) {
      promise.reject("ERROR", e.message)
    }
  }

  /** D·ª´ng server */
  @ReactMethod
  fun stopServer(promise: Promise) {
    try {
      acceptThread?.cancel()
      acceptThread = null
      serverSocket?.close()
      serverSocket = null
      
      promise.resolve("ƒê√£ d·ª´ng server")
    } catch (e: Exception) {
      promise.reject("ERROR", e.message)
    }
  }

  /** Ki·ªÉm tra tr·∫°ng th√°i k·∫øt n·ªëi */
  @ReactMethod
  fun isConnected(promise: Promise) {
    promise.resolve(connectedDevices.isNotEmpty())
  }

  /** L·∫•y danh s√°ch thi·∫øt b·ªã ƒë√£ k·∫øt n·ªëi */
  @ReactMethod
  fun getConnectedDevices(promise: Promise) {
    try {
      val devices = Arguments.createArray()
      for (address in connectedDevices.keys) {
        devices.pushString(address)
      }
      promise.resolve(devices)
    } catch (e: Exception) {
      promise.reject("ERROR", e.message)
    }
  }

  // ==================== G·ª¨I/NH·∫¨N D·ªÆ LI·ªÜU ====================

  /** G·ª≠i tin nh·∫Øn ƒë·∫øn m·ªôt thi·∫øt b·ªã c·ª• th·ªÉ */
  @ReactMethod
  fun sendMessage(address: String, message: String, promise: Promise) {
    try {
      val thread = connectedDevices[address]
      if (thread == null) {
        promise.reject("NOT_CONNECTED", "Ch∆∞a k·∫øt n·ªëi v·ªõi thi·∫øt b·ªã $address")
        return
      }

      thread.write(message.toByteArray())
      promise.resolve("ƒê√£ g·ª≠i tin nh·∫Øn ƒë·∫øn $address")
    } catch (e: Exception) {
      promise.reject("ERROR", e.message)
    }
  }

  // ==================== G·ª¨I/NH·∫¨N FILE BASE64 ====================
  
  private val CHUNK_SIZE = 4096 // 4KB per chunk

  /** G·ª≠i data Base64 ƒë·∫øn m·ªôt thi·∫øt b·ªã */
  @ReactMethod
  fun sendBase64Data(address: String, base64Data: String, fileName: String, type: String, promise: Promise) {
    try {
      val thread = connectedDevices[address]
      if (thread == null) {
        promise.reject("NOT_CONNECTED", "Ch∆∞a k·∫øt n·ªëi v·ªõi thi·∫øt b·ªã $address")
        return
      }

      if (base64Data.isEmpty()) {
        promise.reject("EMPTY_DATA", "D·ªØ li·ªáu Base64 tr·ªëng")
        return
      }

      Log.d(TAG, "üì§ Sending Base64 $type: $fileName (${base64Data.length} chars) to $address")

      // T√≠nh s·ªë chunks
      val totalChunks = (base64Data.length + CHUNK_SIZE - 1) / CHUNK_SIZE
      
      // 1. G·ª≠i header: DATA_B64_START|type|fileName|dataLength|totalChunks
      val header = "DATA_B64_START|$type|$fileName|${base64Data.length}|$totalChunks\n"
      thread.write(header.toByteArray(Charsets.UTF_8))
      
      Thread.sleep(50) // ƒê·ª£i header ƒë∆∞·ª£c x·ª≠ l√Ω
      
      // 2. G·ª≠i t·ª´ng chunk
      for (i in 0 until totalChunks) {
        val start = i * CHUNK_SIZE
        val end = minOf(start + CHUNK_SIZE, base64Data.length)
        val chunk = base64Data.substring(start, end)
        
        val chunkMessage = "DATA_B64_CHUNK|$i|$chunk\n"
        thread.write(chunkMessage.toByteArray(Charsets.UTF_8))
        
        // Progress
        val progress = ((i + 1) * 100 / totalChunks)
        sendEvent("onDataSendProgress", Arguments.createMap().apply {
          putString("deviceAddress", address)
          putString("fileName", fileName)
          putString("type", type)
          putInt("progress", progress)
          putDouble("sent", ((i + 1) * CHUNK_SIZE).toDouble())
          putDouble("total", base64Data.length.toDouble())
        })
        
        Thread.sleep(20) // Delay gi·ªØa chunks ƒë·ªÉ tr√°nh overflow
      }
      
      // 3. G·ª≠i end marker
      val endMessage = "DATA_B64_END\n"
      thread.write(endMessage.toByteArray(Charsets.UTF_8))
      
      Log.d(TAG, "‚úÖ Base64 $type sent: $fileName")
      promise.resolve("ƒê√£ g·ª≠i $type: $fileName")
      
    } catch (e: Exception) {
      Log.e(TAG, "‚ùå Send Base64 data error: ${e.message}", e)
      promise.reject("ERROR", e.message)
    }
  }

  /** G·ª≠i data Base64 ƒë·∫øn t·∫•t c·∫£ thi·∫øt b·ªã */
  @ReactMethod
  fun sendBase64DataToAll(base64Data: String, fileName: String, type: String, promise: Promise) {
    try {
      if (connectedDevices.isEmpty()) {
        promise.reject("NOT_CONNECTED", "Kh√¥ng c√≥ thi·∫øt b·ªã n√†o ƒë∆∞·ª£c k·∫øt n·ªëi")
        return
      }

      if (base64Data.isEmpty()) {
        promise.reject("EMPTY_DATA", "D·ªØ li·ªáu Base64 tr·ªëng")
        return
      }

      Log.d(TAG, "üì§ Sending Base64 $type to all: $fileName (${base64Data.length} chars)")

      // T√≠nh s·ªë chunks m·ªôt l·∫ßn
      val totalChunks = (base64Data.length + CHUNK_SIZE - 1) / CHUNK_SIZE
      var successCount = 0
      
      for ((address, thread) in connectedDevices) {
        try {
          // Header
          val header = "DATA_B64_START|$type|$fileName|${base64Data.length}|$totalChunks\n"
          thread.write(header.toByteArray(Charsets.UTF_8))
          Thread.sleep(50)
          
          // Chunks
          for (i in 0 until totalChunks) {
            val start = i * CHUNK_SIZE
            val end = minOf(start + CHUNK_SIZE, base64Data.length)
            val chunk = base64Data.substring(start, end)
            
            val chunkMessage = "DATA_B64_CHUNK|$i|$chunk\n"
            thread.write(chunkMessage.toByteArray(Charsets.UTF_8))
            
            val progress = ((i + 1) * 100 / totalChunks)
            sendEvent("onDataSendProgress", Arguments.createMap().apply {
              putString("deviceAddress", address)
              putString("fileName", fileName)
              putString("type", type)
              putInt("progress", progress)
            })
            
            Thread.sleep(20)
          }
          
          // End
          thread.write("DATA_B64_END\n".toByteArray(Charsets.UTF_8))
          successCount++
          
        } catch (e: Exception) {
          Log.e(TAG, "Failed to send to $address: ${e.message}")
        }
      }
      
      promise.resolve("ƒê√£ g·ª≠i $type ƒë·∫øn $successCount/${connectedDevices.size} thi·∫øt b·ªã")
      
    } catch (e: Exception) {
      promise.reject("ERROR", e.message)
    }
  }

  /** G·ª≠i tin nh·∫Øn ƒë·∫øn t·∫•t c·∫£ thi·∫øt b·ªã ƒë√£ k·∫øt n·ªëi */
  @ReactMethod
  fun sendMessageToAll(message: String, promise: Promise) {
    try {
      if (connectedDevices.isEmpty()) {
        promise.reject("NOT_CONNECTED", "Kh√¥ng c√≥ thi·∫øt b·ªã n√†o ƒë∆∞·ª£c k·∫øt n·ªëi")
        return
      }

      // Th√™m \n v√†o cu·ªëi tin nh·∫Øn ƒë·ªÉ b√™n nh·∫≠n bi·∫øt khi n√†o k·∫øt th√∫c
      val messageWithNewline = "$message\n"
      Log.d(TAG, "üì§ Sending text message: $message")
      
      for ((address, thread) in connectedDevices) {
        try {
          thread.write(messageWithNewline.toByteArray(Charsets.UTF_8))
        } catch (e: Exception) {
          Log.e(TAG, "L·ªói khi g·ª≠i ƒë·∫øn $address: ${e.message}")
        }
      }
      promise.resolve("ƒê√£ g·ª≠i tin nh·∫Øn ƒë·∫øn t·∫•t c·∫£ thi·∫øt b·ªã")
    } catch (e: Exception) {
      promise.reject("ERROR", e.message)
    }
  }

  // ==================== THREADS ====================

  // Thread ch·ªù k·∫øt n·ªëi ƒë·∫øn (Server) - Ch·∫•p nh·∫≠n NHI·ªÄU k·∫øt n·ªëi
  private inner class AcceptThread : Thread() {
    private val mmServerSocket: BluetoothServerSocket? by lazy(LazyThreadSafetyMode.NONE) {
      adapter?.listenUsingRfcommWithServiceRecord(APP_NAME, MY_UUID)
    }

    override fun run() {
      // L∆∞u server socket ƒë·ªÉ c√≥ th·ªÉ ƒë√≥ng sau
      serverSocket = mmServerSocket
      
      // Ch·∫•p nh·∫≠n nhi·ªÅu k·∫øt n·ªëi li√™n t·ª•c
      while (true) {
        val socket: BluetoothSocket? = try {
          mmServerSocket?.accept()
        } catch (e: IOException) {
          Log.e(TAG, "Socket accept() failed", e)
          break
        }
        
        socket?.also {
          Log.d(TAG, "C√≥ k·∫øt n·ªëi m·ªõi t·ª´: ${it.remoteDevice.address}")
          connected(it)
          // KH√îNG ƒë√≥ng server socket, ti·∫øp t·ª•c ch·∫•p nh·∫≠n k·∫øt n·ªëi m·ªõi
        }
      }
    }

    fun cancel() {
      try {
        mmServerSocket?.close()
      } catch (e: IOException) {
        Log.e(TAG, "Could not close server socket", e)
      }
    }
  }

  // Thread k·∫øt n·ªëi ƒë·∫øn thi·∫øt b·ªã kh√°c (Client)
  private inner class ConnectThread(private val device: BluetoothDevice) : Thread() {
    private var mmSocket: BluetoothSocket? = null

    override fun run() {
      adapter?.cancelDiscovery()
      
      // Th·ª≠ method 1: Standard RFCOMM
      try {
        Log.d(TAG, "Trying standard RFCOMM connection to ${device.name} (${device.address})")
        mmSocket = device.createRfcommSocketToServiceRecord(MY_UUID)
        mmSocket?.connect()
        Log.d(TAG, "‚úÖ Standard RFCOMM connection successful")
        connected(mmSocket!!)
        return
      } catch (e: IOException) {
        Log.w(TAG, "Standard RFCOMM failed: ${e.message}")
        try {
          mmSocket?.close()
        } catch (closeException: IOException) {
          Log.e(TAG, "Could not close socket", closeException)
        }
      }

      // Th·ª≠ method 2: Fallback socket (d√πng reflection)
      try {
        Log.d(TAG, "Trying fallback socket method...")
        val clazz = device.javaClass
        val paramTypes = arrayOf<Class<*>>(Integer.TYPE)
        val method = clazz.getMethod("createRfcommSocket", *paramTypes)
        mmSocket = method.invoke(device, 1) as BluetoothSocket
        mmSocket?.connect()
        Log.d(TAG, "‚úÖ Fallback socket connection successful")
        connected(mmSocket!!)
        return
      } catch (e: Exception) {
        Log.e(TAG, "Fallback socket failed: ${e.message}")
        try {
          mmSocket?.close()
        } catch (closeException: IOException) {
          Log.e(TAG, "Could not close fallback socket", closeException)
        }
      }

      // Th·ª≠ method 3: Insecure RFCOMM
      try {
        Log.d(TAG, "Trying insecure RFCOMM connection...")
        mmSocket = device.createInsecureRfcommSocketToServiceRecord(MY_UUID)
        mmSocket?.connect()
        Log.d(TAG, "‚úÖ Insecure RFCOMM connection successful")
        connected(mmSocket!!)
        return
      } catch (e: IOException) {
        Log.e(TAG, "Insecure RFCOMM failed: ${e.message}")
        try {
          mmSocket?.close()
        } catch (closeException: IOException) {
          Log.e(TAG, "Could not close insecure socket", closeException)
        }
      }

      // T·∫•t c·∫£ ph∆∞∆°ng ph√°p ƒë·ªÅu th·∫•t b·∫°i
      Log.e(TAG, "‚ùå All connection methods failed for ${device.name}")
      sendEvent("onConnectionFailed", Arguments.createMap().apply {
        putString("error", "Kh√¥ng th·ªÉ k·∫øt n·ªëi v·ªõi ${device.name}. H√£y ƒë·∫£m b·∫£o:\n1. Thi·∫øt b·ªã ƒë√£ m·ªü app\n2. ƒê√£ nh·∫•n 'Ch·ªù k·∫øt n·ªëi'\n3. Bluetooth ƒë√£ b·∫≠t")
        putString("deviceName", device.name ?: "Unknown")
        putString("deviceAddress", device.address)
      })
    }

    fun cancel() {
      try {
        mmSocket?.close()
      } catch (e: IOException) {
        Log.e(TAG, "Could not close client socket", e)
      }
    }
  }

  // Thread x·ª≠ l√Ω k·∫øt n·ªëi ƒë√£ thi·∫øt l·∫≠p
  private inner class ConnectedThread(private val mmSocket: BluetoothSocket) : Thread() {
    private val mmInStream: InputStream = mmSocket.inputStream
    private val mmOutStream: OutputStream = mmSocket.outputStream
    private val mmBuffer: ByteArray = ByteArray(8192)
    private val deviceAddress: String = mmSocket.remoteDevice.address
    private var isRunning = true
    
    // Base64 data receiving state
    private var receivingBase64Data = false
    private var base64DataType = ""
    private var base64FileName = ""
    private var base64DataLength = 0
    private var expectedChunks = 0
    private val base64Chunks = mutableMapOf<Int, String>()
    private var receivedChunkCount = 0

    override fun run() {
      val lineBuffer = StringBuilder()
      
      while (isRunning) {
        val numBytes = try {
          mmInStream.read(mmBuffer)
        } catch (e: IOException) {
          Log.e(TAG, "Input stream disconnected from $deviceAddress", e)
          connectionLost(deviceAddress)
          break
        }

        if (numBytes > 0) {
          // Parse text messages (bao g·ªìm Base64 protocol)
          try {
            val data = String(mmBuffer, 0, numBytes, Charsets.UTF_8)
            lineBuffer.append(data)
            
            var newlineIndex = lineBuffer.indexOf('\n')
            while (newlineIndex != -1) {
              val line = lineBuffer.substring(0, newlineIndex).trim()
              lineBuffer.delete(0, newlineIndex + 1)
              
              if (line.isNotEmpty()) {
                when {
                  line.startsWith("DATA_B64_START|") -> {
                    handleBase64Start(line)
                  }
                  line.startsWith("DATA_B64_CHUNK|") -> {
                    handleBase64Chunk(line)
                  }
                  line == "DATA_B64_END" -> {
                    handleBase64End()
                  }
                  else -> {
                    // Text message
                    Log.d(TAG, "üì® Text message: $line")
                    val params = Arguments.createMap()
                    params.putString("message", line)
                    params.putString("deviceAddress", deviceAddress)
                    params.putString("deviceName", mmSocket.remoteDevice.name ?: "Unknown")
                    sendEvent("onMessageReceived", params)
                  }
                }
              }
              
              newlineIndex = lineBuffer.indexOf('\n')
            }
          } catch (e: Exception) {
            Log.e(TAG, "Error parsing data", e)
          }
        }
      }
    }

    private fun handleBase64Start(line: String) {
      try {
        // DATA_B64_START|type|fileName|dataLength|totalChunks
        val parts = line.split("|")
        if (parts.size != 5) return
        
        base64DataType = parts[1]
        base64FileName = parts[2]
        base64DataLength = parts[3].toInt()
        expectedChunks = parts[4].toInt()
        receivingBase64Data = true
        receivedChunkCount = 0
        base64Chunks.clear()
        
        Log.d(TAG, "üì• Base64 $base64DataType start: $base64FileName ($base64DataLength chars, $expectedChunks chunks)")
        
        sendEvent("onDataReceiveStart", Arguments.createMap().apply {
          putString("deviceAddress", deviceAddress)
          putString("deviceName", mmSocket.remoteDevice.name ?: "Unknown")
          putString("fileName", base64FileName)
          putString("type", base64DataType)
          putDouble("dataSize", base64DataLength.toDouble())
        })
        
      } catch (e: Exception) {
        Log.e(TAG, "Error handling Base64 start", e)
      }
    }

    private fun handleBase64Chunk(line: String) {
      try {
        // DATA_B64_CHUNK|chunkIndex|data
        val parts = line.split("|", limit = 3)
        if (parts.size != 3) return
        
        val chunkIndex = parts[1].toInt()
        val chunkData = parts[2]
        
        base64Chunks[chunkIndex] = chunkData
        receivedChunkCount++
        
        val progress = (receivedChunkCount * 100 / expectedChunks)
        
        sendEvent("onDataReceiveProgress", Arguments.createMap().apply {
          putString("deviceAddress", deviceAddress)
          putString("fileName", base64FileName)
          putString("type", base64DataType)
          putInt("progress", progress)
          putDouble("received", receivedChunkCount.toDouble())
          putDouble("total", expectedChunks.toDouble())
        })
        
      } catch (e: Exception) {
        Log.e(TAG, "Error handling Base64 chunk", e)
      }
    }

    private fun handleBase64End() {
      try {
        if (receivedChunkCount != expectedChunks) {
          Log.w(TAG, "Missing chunks: received $receivedChunkCount, expected $expectedChunks")
        }
        
        // Gh√©p c√°c chunks theo th·ª© t·ª±
        val fullBase64 = StringBuilder()
        for (i in 0 until expectedChunks) {
          base64Chunks[i]?.let { fullBase64.append(it) }
        }
        
        // Decode Base64
        val decodedBytes = android.util.Base64.decode(fullBase64.toString(), android.util.Base64.NO_WRAP)
        
        // X·ª≠ l√Ω theo type
        when (base64DataType.lowercase()) {
          "image" -> {
            // Ghi file ·∫£nh
            val downloadsDir = android.os.Environment.getExternalStoragePublicDirectory(
              android.os.Environment.DIRECTORY_DOWNLOADS
            )
            val file = java.io.File(downloadsDir, "BT_IMG_$base64FileName")
            file.writeBytes(decodedBytes)
            
            sendEvent("onImageReceived", Arguments.createMap().apply {
              putString("deviceAddress", deviceAddress)
              putString("deviceName", mmSocket.remoteDevice.name ?: "Unknown")
              putString("fileName", base64FileName)
              putString("filePath", file.absolutePath)
              putDouble("fileSize", decodedBytes.size.toDouble())
              putString("type", base64DataType)
            })
          }
          "audio" -> {
            // Ghi file audio
            val downloadsDir = android.os.Environment.getExternalStoragePublicDirectory(
              android.os.Environment.DIRECTORY_DOWNLOADS
            )
            val file = java.io.File(downloadsDir, "BT_AUDIO_$base64FileName")
            file.writeBytes(decodedBytes)
            
            sendEvent("onAudioReceived", Arguments.createMap().apply {
              putString("deviceAddress", deviceAddress)
              putString("deviceName", mmSocket.remoteDevice.name ?: "Unknown")
              putString("fileName", base64FileName)
              putString("filePath", file.absolutePath)
              putDouble("fileSize", decodedBytes.size.toDouble())
              putString("type", base64DataType)
            })
          }
          "file" -> {
            // Ghi file th√¥ng th∆∞·ªùng
            val downloadsDir = android.os.Environment.getExternalStoragePublicDirectory(
              android.os.Environment.DIRECTORY_DOWNLOADS
            )
            val file = java.io.File(downloadsDir, "BT_$base64FileName")
            file.writeBytes(decodedBytes)
            
            sendEvent("onFileReceived", Arguments.createMap().apply {
              putString("deviceAddress", deviceAddress)
              putString("deviceName", mmSocket.remoteDevice.name ?: "Unknown")
              putString("fileName", base64FileName)
              putString("filePath", file.absolutePath)
              putDouble("fileSize", decodedBytes.size.toDouble())
              putString("type", base64DataType)
            })
          }
          else -> {
            // Data type kh√°c
            sendEvent("onDataReceived", Arguments.createMap().apply {
              putString("deviceAddress", deviceAddress)
              putString("deviceName", mmSocket.remoteDevice.name ?: "Unknown")
              putString("fileName", base64FileName)
              putString("data", fullBase64.toString())
              putString("type", base64DataType)
              putDouble("size", decodedBytes.size.toDouble())
            })
          }
        }
        
        Log.d(TAG, "‚úÖ Base64 $base64DataType completed: $base64FileName")
        
        // Reset state
        receivingBase64Data = false
        base64Chunks.clear()
        
      } catch (e: Exception) {
        Log.e(TAG, "Error handling Base64 end", e)
        receivingBase64Data = false
        base64Chunks.clear()
      }
    }

    fun write(bytes: ByteArray) {
      try {
        mmOutStream.write(bytes)
        mmOutStream.flush()
      } catch (e: IOException) {
        Log.e(TAG, "Error writing to $deviceAddress", e)
        throw e
      }
    }

    fun cancel() {
      isRunning = false
      try {
        mmSocket.close()
      } catch (e: IOException) {
        Log.e(TAG, "Could not close connected socket", e)
      }
    }
  }

  // X·ª≠ l√Ω khi k·∫øt n·ªëi th√†nh c√¥ng
  private fun connected(socket: BluetoothSocket) {
    val deviceAddress = socket.remoteDevice.address
    
    // N·∫øu ƒë√£ c√≥ k·∫øt n·ªëi v·ªõi thi·∫øt b·ªã n√†y, ƒë√≥ng k·∫øt n·ªëi c≈©
    connectedDevices[deviceAddress]?.cancel()
    
    // T·∫°o thread m·ªõi cho k·∫øt n·ªëi n√†y
    val connectedThread = ConnectedThread(socket)
    connectedDevices[deviceAddress] = connectedThread
    connectedThread.start()
    
    val params = Arguments.createMap()
    params.putString("deviceName", socket.remoteDevice.name ?: "Unknown")
    params.putString("deviceAddress", deviceAddress)
    sendEvent("onConnected", params)
    
    Log.d(TAG, "ƒê√£ k·∫øt n·ªëi v·ªõi $deviceAddress. T·ªïng s·ªë k·∫øt n·ªëi: ${connectedDevices.size}")
  }

  // X·ª≠ l√Ω khi m·∫•t k·∫øt n·ªëi
  private fun connectionLost(deviceAddress: String) {
    connectedDevices.remove(deviceAddress)
    
    val params = Arguments.createMap()
    params.putString("deviceAddress", deviceAddress)
    sendEvent("onConnectionLost", params)
    
    Log.d(TAG, "M·∫•t k·∫øt n·ªëi v·ªõi $deviceAddress. C√≤n l·∫°i: ${connectedDevices.size} k·∫øt n·ªëi")
  }

  // ==================== EVENTS ====================

  private fun sendEvent(eventName: String, params: WritableMap?) {
    reactApplicationContext
      .getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter::class.java)
      .emit(eventName, params)
  }

  // ==================== CLEANUP ====================

  override fun onCatalystInstanceDestroy() {
    super.onCatalystInstanceDestroy()
    try {
      reactApplicationContext.unregisterReceiver(discoveryReceiver)
    } catch (e: Exception) {
      Log.w(TAG, "Receiver not registered")
    }
    
    // ƒê√≥ng t·∫•t c·∫£ k·∫øt n·ªëi
    for ((_, thread) in connectedDevices) {
      thread.cancel()
    }
    connectedDevices.clear()
    
    connectThread?.cancel()
    acceptThread?.cancel()
    serverSocket?.close()
  }
}